#!/usr/bin/python
# imports - compatibility imports
from __future__ import print_function

# imports - standard imports
import sys, os
import subprocess
import logging
from distutils.spawn import find_executable

logging.basicConfig()
log = logging.getLogger('get-bench')
log.setLevel(logging.DEBUG)

class const(object):
	URL_HOMEBREW_INSTALL  = 'https://raw.githubusercontent.com/Homebrew/install/master/install'
	HOMEBREW_DEPENDENCIES = ['python', 'git', 'mariadb', 'redis', 'node']
	URL_BENCH             = 'https://github.com/frappe/bench'

def which(executable, raise_err = False):
	path = find_executable(executable)

	if not path and raise_err:
		raise ValueError('{executable} not found.'.format(executable = executable))
	
	return path

def popen(*params, **kwargs):
	output     = kwargs.get('output', True)
	raise_err  = kwargs.get('raise_err', False)
	
	proc       = subprocess.Popen(params,
		stdin  = subprocess.PIPE,
		stdout = subprocess.PIPE,
		stderr = subprocess.PIPE
	)

	if output:
		for line in iter(proc.stdout.readline, ""):
			print(line, end = '')
	
	out, err   = proc.communicate()

	return out

def main(args = None):
	code  = os.EX_OK

	curl  = which('curl', raise_err = True)
	ruby  = which('ruby', raise_err = True)
	
	pout  = popen(curl, const.URL_HOMEBREW_INSTALL, output = False)
	popen(ruby, '-e', pout)

	brew  = which('brew', raise_err = True)
	popen(brew, 'install', *const.HOMEBREW_DEPENDENCIES)

	pip   = which('pip2', raise_err = True)
	popen(pip, 'install', 'https://github.com/frappe/bench/archive/master.zip'.format(github = const.URL_BENCH))

	return code

if __name__ == '__main__':
	args = sys.argv[1:]
	code = main(args)

	sys.exit(code)